<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAQAAAAGAAAACAAAAAkAAAAHAAAABQAAAAMAAAABAAAAAQAAAAEAAAACAAAAAQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAPAAAAGQAAACMAAAApAAAAKwAAACkAAAAiAAAAGQAAAA8AAAAIAAAACQAA
        AA8AAAAQAAAADAAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABgAAAAkAAAAKAAAACgAA
        AAoAAAAKAAAACAAAAAcAAAANAAAAHQAAADMAAABIAAAAWAAAAGMAAABnAAAAZgAAAGAAAABTAAAAQAAA
        ACwAAAAlAAAAMQAAADoAAAAzAAAAHgAAAAsAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAZAAAAKAAA
        AC4AAAAvAAAALwAAAC0AAAAmAAAAIAAAACsAAABGAAAAYwAAAHkBAQCHAgIAkAMDAZUEBAWXBAUHlgQE
        BY8CAgGBAQAAbAAAAFwAAABiAQEBcQEBAW8AAABVAAAALgAAAA8AAAADAAAAAAAAAAAAAAADAAAAEgAA
        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
        UxIAAQYGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA8kFQwwxYlig96bcZrcmGyZ3JZpmdyV
        aZnclWiZ3JVomdyUZpnck2SZ3JJjmNyRYZjckWGY3JBgmNyPX5jcjlyY3IdRmN1/Q5jeeTmW4XYxkdxv
        KkoAAAABDAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAKAAAADAAA
        AAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAABDAAA
        BwoAAA0GAQIHAgEBAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////4D///wAAPAAAABwAAAAMAAAADAAAAAQAAAAEAAAABAAAAAQAA
        AAGAAAAAgAAAAIAAAACAAIAAwABAAMAAYABAACAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAwAA
        AAcAAAD/AAAA////+f////////////////8=
</value>
  </data>
</root>